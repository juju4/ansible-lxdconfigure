---

- name: Ubuntu<20.04 | ensure lxd service is started and enabled
  service: name=lxd state=started enabled=yes
  when: (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int < 20)

- name: Ubuntu>=20.04 | ensure snap.lxd service is started and enabled
  service: name=snap.lxd.daemon state=started enabled=yes
  when: (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 20)

- name: lxc info
  command: lxc info
  register: lxc_info_src
  run_once: true
  changed_when: false

- name: Lxc+docker | don't use zfs
  set_fact:
    lxdconfigure_init: '--storage-backend dir'
  when: >
    (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker"))

## duplicate of lxd role?
## creates=/var/lib/lxd/lxd.db ? correct?
- name: configure lxd daemon
  command: "lxd init --auto {{ lxdconfigure_init }}"
  register: lxdinit
  args:
    creates: "/var/lib/lxd/disks/{{ lxd_storage_pool }}.img"
  changed_when:
    - lxdinit.rc == 0
    - "lxdinit.stderr is not defined or 'Error: Storage has already been configured' not in lxdinit.stderr"
  failed_when:
    - lxdinit.rc != 0
    - "lxdinit.stderr is not defined or 'Error: Storage has already been configured' not in lxdinit.stderr"
  when: >
    ("'storage: \"\",' in lxc_info_src.stdout") and
    not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker"))

- name: lxc storage list
  shell: lxc storage list | egrep -v '(NAME|---)'
  register: lxc_storage_ls
  run_once: true
  ignore_errors: true
  changed_when: false

# https://lxd.readthedocs.io/en/latest/storage/
- name: create storage pool
  command: >
    lxc storage create {{ lxd_storage_pool }} zfs zfs.pool\_name={{ lxd_zpool }}
#    lxc storage create {{ lxd_storage_pool }} zfs source={{ lxd_zpool }}
  register: lxcstor
  args:
    creates: "/var/lib/lxd/disks/{{ lxd_storage_pool }}.img"
  changed_when:
    - lxcstor.rc == 0
    - "lxcstor.stderr is not defined or 'Error: The storage pool already exists' not in lxcstor.stderr"
  failed_when:
    - lxcstor.rc != 0
    - "lxcstor.stderr is not defined or 'Error: The storage pool already exists' not in lxcstor.stderr"
  when:
    - lxd_storage_backend == 'zfs'
    - not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker"))

- name: check default profile
  command: lxc profile show default
  register: lxc_profile_show
  ignore_errors: true
  changed_when: false

- name: add storage pool to default profile
  command: >
    lxc profile device add default root disk path=/ pool={{ lxd_storage_pool }}
  when:
    not (lxd_storage_pool in lxc_profile_show.stdout) and
    lxd_storage_backend == 'zfs' and
    not (ansible_virtualization_type is defined and (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker"))

- name: check network
  command: lxc network list
  register: lxc_network_list
  ignore_errors: true
  changed_when: false

- name: Debug | lxc network
  debug:
    var: lxc_network_list
    verbosity: 1

- name: list existing lxc images
  command: "lxc image list"
  changed_when: false
  register: imagelist
- name: pre copy lxc images
  include: "lxc-image-copy.yml current={{ imagelist }} image={{ item.i | default('') }} alias={{ item.alias | default('') }}"
  with_items: "{{ lxd_preloadimages }}"

- name: list existing lxc images
  command: "lxc image list"
  changed_when: false
  register: imagelist2
- name: list existing lxc instances
  command: "lxc list"
  changed_when: false
  register: lxclist2

- block:
    - name: Debug | lxd_preconfigure
      debug: var=lxd_preconfigure
    - name: pre-configure lxc images
      include: "lxd-preconfigure.yml imagelist={{ imagelist2 }} lxclist={{ lxclist2 }} guest={{ outer_item.guest | default('') }} template={{ outer_item.template | default('') }} publishalias={{ outer_item.publishalias | default('') }} privileged={{ outer_item.privileged | default('') }} shellcmds={{ outer_item.shellcmds | default('') }}"  # noqa 204
      with_items: "{{ lxd_preconfigure }}"
      loop_control:
        loop_var: outer_item
  when: lxd_preconfigure is defined and lxd_preconfigure and lxd_preconfigure != []
